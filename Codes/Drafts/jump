#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>

using namespace sf;

// Constants
const int WIDTH = 1000;
const int HEIGHT = 1000;
const float  moveSpeed = 200.0f;
const float jump_strength = -5000.0f;
const float gravity = 25000.0f;
bool isGround = false;
bool once = true;

// Textures
Texture tex_background, tex_ground, tex_wall_right, tex_wall_left, tex_player;

// Sprites
Sprite background, ground, wall, wall2, ground2;

// Player Struct
struct Players {
    Sprite sprite;
    float velocity_x;
    float velocity_y;
    int frameIndex;

    // Constructor to load the player sprite
    Players() {
        velocity_x = 0;
        velocity_y = 0;
        frameIndex = 0;

        // Load the player texture
        if (!tex_player.loadFromFile("player.png")) {
            throw std::runtime_error("Failed to load player texture");
        }

        sprite.setTexture(tex_player);
        sprite.setTextureRect(IntRect(0, 0, 42, 71)); // Crop sprite
        sprite.setOrigin(21, 71);
        sprite.setPosition(500, 650);
        sprite.setScale(2.4f, 2.4f);
    }

    void handleMovement(float deltatime) {

        if (Keyboard::isKeyPressed(Keyboard::Right)) {
            sprite.setScale(2.4, 2.4);
            velocity_x = moveSpeed * deltatime;
            sprite.setTextureRect(IntRect(frameIndex * 37, 0, 42, 71));
            frameIndex++;
            frameIndex = frameIndex % 4;
        }
        else if (Keyboard::isKeyPressed(Keyboard::Left)) {
            sprite.setScale(-2.4, 2.4);
            velocity_x = -moveSpeed * deltatime;
            sprite.setTextureRect(IntRect(frameIndex * 37, 0, 42, 71));
            frameIndex++;
            frameIndex = frameIndex % 4;
        }
        else {
            velocity_x = 0; // Stop when no key is pressed
        }

        sprite.move(velocity_x, 0);
    }

    void jump(float deltatime) {
        if (Keyboard::isKeyPressed(Keyboard::Space) && once) {
            frameIndex = 5;
            sprite.setScale(2.4, 2.4);
            sprite.setTextureRect(IntRect(frameIndex * 37, 0, 42, 71));

            if (isGround) {
                velocity_y = jump_strength;  // Apply jump strength
                isGround = false;       // Player is no longer grounded
                once = false;
                //sound.play();
            }

        }
    }
};

void initializeObject(RenderWindow& window) {
    // Load textures
    if (!tex_background.loadFromFile("background.jpg")) return;
    if (!tex_ground.loadFromFile("ground.jpg")) return;
    if (!tex_wall_left.loadFromFile("wall left.png")) return;
    if (!tex_wall_right.loadFromFile("wall flipped right.png")) return;
    if (!tex_player.loadFromFile("player.png")) return;


    background.setTexture(tex_background);
    background.setScale(static_cast<float>(window.getSize().x) / tex_background.getSize().x,
        static_cast<float>(window.getSize().y) / tex_background.getSize().y);
    background.setPosition(0, 0);

    ground.setTexture(tex_ground);
    ground.setPosition(-50, 800);
    ground.setScale(1.5, 1.5);

    wall.setTexture(tex_wall_left);
    wall.setPosition(0, 0);
    wall.setScale(1.5, 3);

    wall2.setTexture(tex_wall_right);
    wall2.setPosition(880, 0);
    wall2.setScale(1.5, 3);

}

void draw(RenderWindow& window, Players& player) {
    window.draw(background);
    window.draw(ground);
    window.draw(wall);
    window.draw(wall2);
    window.draw(player.sprite);
    window.draw(ground2);
}

int main() {
    RenderWindow window(VideoMode(WIDTH, HEIGHT), "Icy Tower SFML");

    window.setFramerateLimit(60);

    initializeObject(window);
    Players player;
    Clock clock;

    player.sprite.setOrigin(player.sprite.getLocalBounds().width / 2, 0);

    while (window.isOpen()) {
        // Calculate delta time
        float deltatime = clock.restart().asSeconds();

        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
        }

        //Collision detection with the ground
        if (player.sprite.getGlobalBounds().intersects(ground.getGlobalBounds())) {
            player.sprite.setPosition(player.sprite.getPosition().x, ground.getPosition().y + 15 - player.sprite.getGlobalBounds().height);  // Position on the ground
            isGround = true;

            player.velocity_y = 0;
            once = true;
        }

        // previnting player from getting outside the window
        
        //Collision detection with the left wall
        if (player.sprite.getGlobalBounds().intersects(wall.getGlobalBounds())) {
            player.sprite.setPosition(wall.getGlobalBounds().left + wall.getGlobalBounds().width + 50, player.sprite.getPosition().y);  // Position on the wall
            player.velocity_x = 0;
        }

        //Collision detection with the right wall
        else if (player.sprite.getGlobalBounds().intersects(wall2.getGlobalBounds())) {
            player.sprite.setPosition(wall2.getGlobalBounds().left - player.sprite.getGlobalBounds().width + 50, player.sprite.getPosition().y);  // Position on the wall
            player.velocity_x = 0;
        }

        player.jump(deltatime);

        if (!isGround) {
            player.velocity_y += gravity * deltatime;
            player.frameIndex = 5;
            player.sprite.setTextureRect(IntRect(player.frameIndex * 37, 0, 42, 71));
        }
        player.sprite.move(player.velocity_x*deltatime, player.velocity_y * deltatime);
        player.handleMovement(deltatime);

        window.clear();
        draw(window, player);
        window.display();
    }
}
